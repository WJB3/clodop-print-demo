/**依赖详解**/
@babel/core 将@babel/core的作用是把 js 代码分析成 ast ，方便各个插件分析语法进行相应的处理。
@babel/preset-react 转化react中jsx的写法

/**css-loader抄袭笔记**/
loaderUtils.getOptions(this)  这个函数可以获取 loader的options 且是对象类型
postcss 是js插件 类似于babel对js的操作
postcss-modules-values 可以在css使用变量其作用是解析变量
path.relative 方法接受两个绝对路径的参数，该方法返回第二个路径相对于第一个路径的相对路径，如果path.relative方法的两个参数相同，则返回一个空字符串。
```example
path.relative('/data/orandea/test/aaa', '/data/orandea/impl/bbb')
// /data/orandea/impl/bbb
```
this.async:根据webpack文档，当我们调用this.async()时，会将loader变为一个异步的loader，并返回一个异步回调。

postcss-modules-local-by-default 用于cssmodule控制作用域css-loader的配置项modules有关；
如果modules配置为true，则该插件会给每个类名前加:local，这样在js中import s from './a.css'时得到的s值为{ colorYellow: 'yellow', aClass: '_3RfWl8Fjg9j10HraIxvVwo _2WlYzvzC-urSx4y6mIOOFM', app: '_2fkqRy5LeEcw20RyY_eLpM' }，
否则为{ colorYellow: 'yellow', aClass: '_3RfWl8Fjg9j10HraIxvVwo _2WlYzvzC-urSx4y6mIOOFM' }；区别在于a.css中app这个class，在示例代码中.app前面没加:local则导出的对象中不包含app，
但是modules设置为true时本插件会默认给app加上local，所以导出的对象中就有app。
 
loaderUtils.isUrlRequest  判断是否是一个url
loaderUtils.urlToRequest  将一些资源URL转换为webpack模块URL。

postcss-modules-extract-imports该插件的作用是将
````
:local(.aClass) {
    composes: className from './b.css';
    background: colorYellow;
}   
```转出
```
:import("./b.css"){
  className: i__imported_className_0;
}
:local(.aClass) {
    composes: i__imported_className_0;
    background: colorYellow;
}
```
postcss-modules-scope该插件的作用就是export出js中能够引入的对象
```
:local(.aClass) {
    composes: i__imported_className_0;
    background: colorYellow;
}
```转成
```
:export {
  aClass: _3RfWl8Fjg9j10HraIxvVwo
}
._3RfWl8Fjg9j10HraIxvVwo {
    composes: i__imported_className_0;
    background: colorYellow;
}
```

postcss.plugin是编写自己的postcss插件的

postcss-value-parser 是将CSS声明值和at规则参数转换为节点树，并提供简单的遍历API。

css-selector-tokenizer 解析CSS字符串选择器。

postcss 为我们提供了一些基本的 ast 操作方法：-walk：遍历所有节点信息-walkAtRules：遍历所有 atrule 类型节点-walkRules：遍历所有 rule 类型节点-walkComments：遍历所有 comment 类型节点

babel-code-frame 可以展示报错信息
/**
const rawLines = `class Foo {
  constructor()
}`;
const lineNumber = 2;
const colNumber = 16;

const result = codeFrame(rawLines, lineNumber, colNumber, { /* options */ });
 1 | class Foo {
> 2 |   constructor()
    |                ^
  3 | }
**/

btoa() 方法用于创建一个 base-64 编码的字符串。

unescape() 函数可对通过 escape() 编码的字符串进行解码。